<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ðŸŽ® Book a Gaming Session</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <style>
    body {
      background: #121212;
      color: #fff;
      min-height: 100vh;
    }
    .container { max-width: 700px; }
    .card {
      background: #1e1e1e;
      border-radius: 12px;
      padding: 2rem;
      margin-top: 2rem;
      box-shadow: 0 0 20px rgba(0,0,0,0.5);
    }
    .form-control {
      background: #2a2a2a;
      color: #fff;
      border: 1px solid #444;
    }
    .form-control:focus {
      box-shadow: none;
      border-color: #0d6efd;
    }
    .btn-success {
      background: #0d6efd;
      border: none;
    }
    .btn-success:hover { background: #0b5ed7; }

    /* Booking table row highlight for updates */
    #userBookingsTable tbody tr.updated {
      background: rgba(0, 255, 255, 0.15);
      box-shadow: 0 0 15px rgba(0, 255, 255, 0.6);
      transform: scale(1.02);
      transition: all 0.3s ease;
    }
  </style>
</head>
<body>

  <div class="container">
    <div class="card">
      <h2 class="mb-4 text-center text-success">ðŸŽ® Book a Gaming Session</h2>

      <!-- ===== Booking Form ===== -->
      <form id="bookingForm" class="row g-3">
        <div class="col-md-6">
          <label class="form-label">Game</label>
          <input type="text" name="game" class="form-control" placeholder="Enter game name" required>
        </div>
        <div class="col-md-6">
          <label class="form-label">Console</label>
          <input type="text" name="console" class="form-control" placeholder="Enter console type" required>
        </div>
        <div class="col-md-6">
          <label class="form-label">Date</label>
          <input type="date" name="date" class="form-control" required>
        </div>
        <div class="col-md-6">
          <label class="form-label">Time Slot</label>
          <input type="time" name="timeSlot" class="form-control" required>
        </div>
        <div class="col-12">
          <button type="submit" class="btn btn-success w-100">
            <i class="bi bi-calendar-check"></i> Book Now
          </button>
        </div>
      </form>

      <div id="bookingMessage"></div>

      <!-- ===== User Bookings Table ===== -->
      <div class="mt-4">
        <h5 class="text-success">Your Bookings</h5>
        <div class="table-responsive">
          <table class="table table-striped table-dark" id="userBookingsTable">
            <thead>
              <tr>
                <th>ID</th>
                <th>Game</th>
                <th>Console</th>
                <th>Date</th>
                <th>Time Slot</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody>
              <!-- User bookings populate dynamically -->
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  const form = document.getElementById("bookingForm");
  const msgDiv = document.getElementById("bookingMessage");
  const bookingsTbody = document.querySelector("#userBookingsTable tbody");

  // Add or update a booking row
  function addOrUpdateRow(b) {
    let row = document.getElementById(`booking-${b._id}`);
    const badgeClass = b.status === "Pending" ? "warning" :
                       b.status === "Confirmed" ? "success" :
                       b.status === "Completed" ? "primary" :
                       b.status === "Cancelled" ? "danger" : "secondary";

    if (row) {
      // Update existing row
      row.querySelector("td:nth-child(2)").textContent = b.game;
      row.querySelector("td:nth-child(3)").textContent = b.console;
      row.querySelector("td:nth-child(4)").textContent = new Date(b.date).toLocaleDateString();
      row.querySelector("td:nth-child(5)").textContent = b.timeSlot;
      const statusCell = row.querySelector("td:nth-child(6) span");
      statusCell.textContent = b.status;
      statusCell.className = `badge bg-${badgeClass}`;
      row.classList.add("updated");
      setTimeout(() => row.classList.remove("updated"), 3000);
    } else {
      // Add new row
      row = document.createElement("tr");
      row.id = `booking-${b._id}`;
      row.classList.add("updated");
      row.innerHTML = `
        <td>${b._id}</td>
        <td>${b.game}</td>
        <td>${b.console}</td>
        <td>${new Date(b.date).toLocaleDateString()}</td>
        <td>${b.timeSlot}</td>
        <td><span class="badge bg-${badgeClass}">${b.status}</span></td>
      `;
      bookingsTbody.appendChild(row);
      setTimeout(() => row.classList.remove("updated"), 3000);
    }
  }

  // Fetch all bookings for this user
  async function fetchBookings() {
    try {
      const res = await fetch("/gaming/bookings/json");
      const bookings = await res.json();
      bookingsTbody.innerHTML = "";
      bookings.forEach(addOrUpdateRow);
    } catch (err) {
      console.error(err);
    }
  }

  // Initial load
  fetchBookings();

  // Handle booking form submission
  form.addEventListener("submit", async e => {
    e.preventDefault();
    const data = {
      game: form.game.value,
      console: form.console.value,
      date: form.date.value,
      timeSlot: form.timeSlot.value
    };
    try {
      const res = await fetch("/gaming/book", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });
      const result = await res.json();
      if (result.success) {
        msgDiv.innerHTML = `<div class="alert alert-success">${result.message}</div>`;
        addOrUpdateRow(result.booking);
        form.reset();
      } else {
        msgDiv.innerHTML = `<div class="alert alert-danger">${result.message}</div>`;
      }
    } catch (err) {
      msgDiv.innerHTML = `<div class="alert alert-danger">Server error: ${err.message}</div>`;
    }
  });

  // Listen for admin or other updates via Socket.IO
  socket.on("updateBooking", addOrUpdateRow);
  socket.on("newBooking", addOrUpdateRow);
</script>

</body>
</html>
